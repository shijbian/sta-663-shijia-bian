if( u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = runif(1)*0.5
g[i] = rcauchy(1)
f[i] = g[i]*dnorm(g[i], 0, 1)
}
}
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1) * 0.5
g[1] = rcauchy(1)
f[1] = g[1]*dnorm(g[1])
count = 0
for (i in 2:N){
if( u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = runif(1, 0, 1)*0.5
g[i] = rcauchy(1)
f[i] = g[i]*dnorm(g[i], 0, 1)
}
}
for (i in 2:N){
if( u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))*0.5
g[i] = rcauchy(1)
f[i] = g[i]*dnorm(g[i], 0, 1)
}
}
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u
g
f
u[1] = runif(1) * 0.5
g[1] = rcauchy(1)
f[1] = g[1]*dnorm(g[1])
count = 0
for (i in 2:N){
if( u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))*0.5
g[i] = rcauchy(1)
f[i] = g[i]*dnorm(g[i], 0, 1)
}
}
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1) * 0.5
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*dnorm(g[1])
count = 0
for (i in 2:N){
if( u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))*0.5
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
for (i in 2:N){
if( u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
}
}
u[5]
?dcauchy
for (i in 2:N){
if (g[i-1] == 0) {
g[i-1] = g[i-1] + 10^(-6)
}
if (u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))*0.5
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
count
M
1/M
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*dnorm(g[1])
count = 0
for (i in 2:N){
if (g[i-1] == 0) {
g[i-1] = g[i-1] + 10^(-6)
}
if (u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
count
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1) * 46.5
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*dnorm(g[1])
count = 0
for (i in 2:N){
if (g[i-1] == 0) {
g[i-1] = g[i-1] + 10^(-6)
}
if (u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1)) * 46.5
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
count
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*dnorm(g[1])
count = 0
for (i in 2:N){
if (g[i-1] == 0) {
g[i-1] = g[i-1] + 10^(-6)
}
if (u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
head(f)
head(g)
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)+3
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 2:N){
if (g[i-1] == 0) {
g[i-1] = g[i-1] + 10^(-6)
}
if (u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)+3
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
count
?runif
head(g)
head(f)
head(f/g)
head(u)
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
count
for (i in 2:N){
if (g[i-1] == 0) {
g[i-1] = g[i-1] + 10^(-6)
}
if (u[i-1] < (f[i-1]/g[i-1]) ){
count = count + 1
f[i] = g[i-1]
} else {
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
}
}
count
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 1:N){
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
if (g[i] == 0) {
g[i] = g[i] + 10^(-6)
}
if (u[i] < (f[i]/g[i]) ){
count = count + 1
f[i] = g[i]
}
}
count
count/100000
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)*46
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 1:N){
u[i] = (runif(1, 0, 1))*46
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
if (g[i] == 0) {
g[i] = g[i] + 10^(-6)
}
if (u[i] < (f[i]/g[i]) ){
count = count + 1
f[i] = g[i]
}
}
count
count、100000
count/100000
theta0=3;n=100;N=10^4
x=rnorm(n)+theta0
lik=function(the){prod(dnorm(x,mean=the))}
M=optimise(f=function(the){prod(dnorm(x,mean=the))},
int=range(x),max=T)$obj
theta0=3;n=100;N=10^4
x=rnorm(n)+theta0
lik=function(the){prod(dnorm(x,mean=the))}
M=optimise(lik(the),int=range(x),max=T)$obj
theta0=3;n=100;N=10^4
x=rnorm(n)+theta0
lik=function(the){prod(dnorm(x,mean=the))}
M=optimise(f = lik(the),int=range(x),max=T)$obj
theta0=3;n=100;N=10^4
x=rnorm(n)+theta0
lik=function(the){prod(dnorm(x,mean=the))}
M=optimise(f =function(the){prod(dnorm(x,mean=the))},int=range(x),max=T)$obj
theta0=3
n=100
N=10^4
x=rnorm(n)+theta0
lik=function(the){
prod(dnorm(x,mean=the))
}
M = optimise(f=function(the){prod(dnorm(x,mean=the))}, int=range(x),maximum=TRUE)$obj
M
theta=rcauchy(N)
res=(M*runif(N)>apply(as.matrix(theta),1,lik));print(sum(res)/N)
resS = c()
while (sum(resS)>0){
le=sum(res)
theta[res]=rcauchy(le)
resS =c (resS, (M*runif(le)>apply(as.matrix(theta[res]),1,lik)))
}
resS
theta=rcauchy(1)
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)*46
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 1:N){
u[i] = (runif(1, 0, 1))*46
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
if (g[i] == 0) {
g[i] = g[i] + 10^(-6)
}
if (u[i] < (f[i]/g[i]) ){
count = count + 1
f[i] = g[i]
}
}
count
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)*46
g[1] = rcauchy(1)
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 1:N){
u[i] = (runif(1, 0, 1))*46
g[i] = rcauchy(1)
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
if (g[i] == 0) {
g[i] = g[i] + 10^(-6)
}
if (u[i] < (f[i]/g[i]) ){
count = count + 1
f[i] = g[i]
}
}
count
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x))
lines(x,dcauchy(x))
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x))
lines(x,dcauchy(x),lwd=2)
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue")
lines(x,dcauchy(x),lwd=2, col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue")
lines(x,46*dcauchy(x), col = "purple")
plot(x, dnorm(x),lwd=2, col = "blue")
lines(x,10*dcauchy(x), col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue")
lines(x,14*dcauchy(x), col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue")
lines(x,4*dcauchy(x), col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue", ylim = 10)
lines(x,4*dcauchy(x), col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue", ylim = 5)
lines(x,4*dcauchy(x), col = "purple")
?plot
?xlim
plot(x, dnorm(x),lwd=2, col = "blue", ylim = c(0,5))
lines(x,4*dcauchy(x), col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue", ylim = c(0,5))
lines(x,10*dcauchy(x), col = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue", ylim = c(0,5))
lines(x,20*dcauchy(x), col = "purple")
?lines
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=2, col = "blue", ylim = c(0,10))
lines(x,20*dcauchy(x), clwd=1,ol = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=1, col = "blue", ylim = c(0,10))
lines(x,20*dcauchy(x), clwd=1,ol = "purple")
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(x),lwd=1, type = "l", col = "blue", ylim = c(0,10))
lines(x,20*dcauchy(x), lwd=1,ol = "purple")
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)*20
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 1:N){
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)*20
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
if (g[i] == 0) {
g[i] = g[i] + 10^(-6)
}
if (u[i] < (f[i]/g[i]) ){
count = count + 1
f[i] = g[i]
}
}
count
count/N
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(rchauchy(x)),lwd=1, type = "l", col = "blue", ylim = c(0,10))
lines(x,20*dcauchy(x), lwd=1,ol = "purple")
?rchauchy
?rchauchy
x = seq(-3,3,length.out = 1000)
plot(x, dnorm(rcauchy(x)),lwd=1, type = "l", col = "blue", ylim = c(0,10))
lines(x,20*dcauchy(x), lwd=1,ol = "purple")
x = seq(-3,3,length.out = 1000)
theta = rcauchy(N)
y = dnorm(theta)
plot(theta, y,lwd=1, type = "l", col = "blue", ylim = c(0,10))
lines(x,20*dcauchy(x), lwd=1,ol = "purple")
N=100000
x = seq(-3,3,length.out = 1000)
theta = rcauchy(N)
y = dnorm(theta)
plot(theta, y,=type = "l", col = "blue", ylim = c(0,10))
N=100000
x = seq(-3,3,length.out = 1000)
theta = rcauchy(N)
y = dnorm(theta)
plot(theta, y,type = "l", col = "blue", ylim = c(0,10))
N = 100000
u = numeric(N)
g = numeric(N)
f = numeric(N)
u[1] = runif(1)
g[1] = rcauchy(1)*20
f[1] = (dcauchy(g[i]))*(dnorm(g[1]))
count = 0
for (i in 1:N){
u[i] = (runif(1, 0, 1))
g[i] = rcauchy(1)*20
f[i] = (dcauchy(g[i]))*(dnorm(g[i], 0, 1))
if (g[i] == 0) {
g[i] = g[i] + 10^(-6)
}
if (u[i] < (f[i]/g[i]) ){
count = count + 1
f[i] = g[i]
}
}
count/N
1-count/N
X=rnorm(100,real_theta,1)
lkhd=function(theta){prod(dnorm(X,theta,1))}
M=optimize(lkhd,interval=range(X),maximum=TRUE)$obj
diff=rep(0,m)
#(i)
for (j in 1:m){
y=rep(0,N)
i=1
while (i<=N)
{
x=rcauchy(1)
u=runif(1)
if (u<lkhd(x)/M){
y[i]=x
i=i+1
}
}
error1=mean(y)-real_theta
# (ii)
y=rep(0,N)
i=1
while (i<=N)
{
x=rcauchy(1)
x2=rcauchy(1)
u=runif(1)
if (u<dcauchy(x)*lkhd(x)/(M*dcauchy(x2))){
y[i]=x
i=i+1
}
}
error2=mean(y)-real_theta
diff[j]=error1-error2
}
return(diff)
}
diff=com_func()
hist(diff, main="Distribution of difference between error in (i) and (ii)",freq=F)
setwd("~/sta-663-shijia-bian/Midterm Exam")
iris = read.csv("iris.csv")
head(iris)
install.packages("plyr")
library(plyr)
cdata <- ddply(iris, c("Name"),mean = mean(SepalLength))
cdata
cdata <- ddply(iris, c("Name"), summarise, N = length(SepalLength),mean = mean(SepalLength))
cdata
cdata <- ddply(iris, c("Name"), summarise, N = length(SepalLength),mean = mean(SepalWidth))
cdata
cdata <- ddply(iris, c("Name"), summarise, N = length(PetalLength),mean = mean(PetalLength))
cdata
cdata <- ddply(iris, c("Name"), summarise, N = length(PetalWidth),mean = mean(PetalWidth))
cdata
head(iris)
xyplot(SepalLength~PetalLength,data=iris,groups=factor(Name,labels=c("A","B", "C")))
install.packages("lattice")
library(lattice)
xyplot(SepalLength~PetalLength,data=iris,groups=factor(Name,labels=c("A","B", "C")))
xyplot(PetalLength~SepalLength,data=iris,groups=factor(Name,labels=c("A","B", "C")))
